"""
Station Configuration File Generator
Generates MikroTik configuration files and custom login pages for each station
"""
import os
from django.conf import settings
from django.utils import timezone
from django.http import HttpResponse
import uuid


def get_server_url():
    """
    Dynamically detect server URL based on environment
    
    Returns:
        str: Complete server URL (http://ip:port or https://domain)
    """
    try:
        from django.conf import settings
        
        # Check if we have a custom SITE_URL in settings
        if hasattr(settings, 'SITE_URL') and settings.SITE_URL:
            return settings.SITE_URL.rstrip('/')
        
        # Check if we're in production (has custom domain)
        allowed_hosts = getattr(settings, 'ALLOWED_HOSTS', [])
        
        # Look for production domains (not localhost, 127.0.0.1, or local IPs)
        production_hosts = [
            host for host in allowed_hosts 
            if host not in ['localhost', '127.0.0.1', '*'] 
            and not host.startswith('192.168.') 
            and not host.startswith('10.') 
            and not host.startswith('172.')
            and '.' in host
        ]
        
        if production_hosts:
            # Use first production domain with HTTPS
            domain = production_hosts[0]
            return f"https://{domain}"
        
        # Check if DEBUG is False (production indicator)
        debug_mode = getattr(settings, 'DEBUG', True)
        if not debug_mode and allowed_hosts and allowed_hosts[0] != '*':
            # Production mode with specific host
            host = allowed_hosts[0]
            if host not in ['localhost', '127.0.0.1']:
                return f"https://{host}"
        
        # Default to local development
        return "http://127.0.0.1:8000"
        
    except:
        # Fallback if Django settings not available
        return "http://127.0.0.1:8000"


def get_server_ip_from_url(server_url):
    """
    Extract IP or domain from server URL for MikroTik config
    
    Args:
        server_url: Full server URL (e.g., "https://mydomain.com" or "http://192.168.1.10:8000")
    
    Returns:
        str: IP address or domain without protocol/port
    """
    import re
    
    # Extract domain/IP from URL
    match = re.match(r'https?://([^:/]+)', server_url)
    if match:
        return match.group(1)
    
    return "127.0.0.1"


def generate_station_mikrotik_config(station, django_server_url=None):
    """
    Generate station-specific MikroTik RouterOS configuration script
    
    Args:
        station: RouterConfig instance
        django_server_url: Full Django server URL (auto-detected if None)
    
    Returns:
        str: Complete MikroTik configuration script
    """
    
    # Auto-detect server URL if not provided
    if not django_server_url:
        django_server_url = get_server_url()
    
    # Extract IP/domain for MikroTik config
    django_server_ip = get_server_ip_from_url(django_server_url)
    
    # Generate unique RADIUS secret for this station
    station_radius_secret = f"radius_{station.id}_{str(uuid.uuid4())[:8]}"
    
    # Determine hotspot network based on station ID to avoid conflicts
    station_network = f"192.168.{100 + (station.id % 50)}"  # 192.168.100.x to 192.168.150.x
    
    config = f"""# MikroTik RouterOS Configuration for Station: {station.name}
# Generated by WiFi Billing System
# Station ID: {station.id}
# Date: {timezone.now().strftime('%Y-%m-%d %H:%M:%S')}
# Business: {station.business_name or 'WiFi Hotspot'}

#================================================
# BASIC SYSTEM CONFIGURATION
#================================================

# Set system identity
/system identity
set name="{station.name}"

# Configure system clock
/system clock
set time-zone-name=Africa/Nairobi

# Enable necessary services
/ip service
set telnet disabled=yes
set ftp disabled=yes
set www disabled=no port=80
set ssh disabled=no port=22
set api disabled=no port={station.api_port}
set winbox disabled=no port=8291
set api-ssl disabled=yes

#================================================
# USER MANAGEMENT
#================================================

# Create API user for billing system
/user
add name="{station.username}" password="{station.password}" group=full comment="Billing System API User"

#================================================
# NETWORK CONFIGURATION
#================================================

# Create bridge for hotspot
/interface bridge
add name=hotspot-bridge comment="Hotspot Bridge Interface"

# Add WiFi interface to bridge (adjust interface name as needed)
/interface bridge port
add bridge=hotspot-bridge interface={station.hotspot_interface}

# Configure IP pool for hotspot users
/ip pool
add name=hotspot-pool ranges={station_network}.10-{station_network}.200

# Configure hotspot IP address
/ip address
add address={station_network}.1/24 interface=hotspot-bridge

# Configure DHCP server
/ip dhcp-server network
add address={station_network}.0/24 dns-server={station_network}.1 gateway={station_network}.1

/ip dhcp-server
add address-pool=hotspot-pool disabled=no interface=hotspot-bridge name=dhcp-hotspot

#================================================
# HOTSPOT CONFIGURATION
#================================================

# Create hotspot user profiles for different plans
/ip hotspot user profile
add name="30min" rate-limit="1M/1M" session-timeout=30m idle-timeout=5m
add name="1hour" rate-limit="1M/1M" session-timeout=1h idle-timeout=5m
add name="3hour" rate-limit="2M/2M" session-timeout=3h idle-timeout=5m
add name="6hour" rate-limit="3M/3M" session-timeout=6h idle-timeout=5m
add name="1day" rate-limit="3M/3M" session-timeout=1d idle-timeout=10m
add name="3day" rate-limit="4M/4M" session-timeout=3d idle-timeout=10m
add name="7day" rate-limit="5M/5M" session-timeout=7d idle-timeout=15m
add name="unlimited" rate-limit="5M/5M" idle-timeout=30m

# Create hotspot server profile
/ip hotspot profile
add dns-name="wifi.local" \\
    hotspot-address={station_network}.1 \\
    html-directory=hotspot \\
    http-cookie-lifetime=1d \\
    login-by=cookie,http-chap,http-pap \\
    mac-auth-mode=mac-as-username-and-password \\
    name=billing-profile \\
    radius-accounting=yes \\
    radius-default-domain="" \\
    radius-interim-update=5m \\
    radius-location-id="{station.id}" \\
    radius-location-name="{station.name}" \\
    radius-mac-format=XX:XX:XX:XX:XX:XX \\
    radius-username-encoding=no \\
    use-radius=yes

# Create hotspot server
/ip hotspot
add address-pool=hotspot-pool \\
    disabled=no \\
    interface=hotspot-bridge \\
    name=station-hotspot \\
    profile=billing-profile

#================================================
# RADIUS CONFIGURATION
#================================================

# Configure RADIUS server (replace {django_server_ip} with your actual server IP)
/radius
add address={django_server_ip} \\
    secret="{station_radius_secret}" \\
    service=hotspot,login \\
    timeout=5s \\
    comment="WiFi Billing System RADIUS"

#================================================
# WALLED GARDEN CONFIGURATION
#================================================

# Configure walled garden for billing portal and payment gateways
/ip hotspot walled-garden
add dst-host={django_server_ip} comment="Django Billing Server"
add dst-host=*.safaricom.co.ke comment="Safaricom M-Pesa"
add dst-host=*.kcbbuni.com comment="KCB Buni API"
add dst-host=*.kcbgroup.com comment="KCB Group"
add dst-host=safaricom.co.ke comment="Safaricom"
add dst-host=kcbbuni.com comment="KCB Buni"

#================================================
# FIREWALL CONFIGURATION
#================================================

# NAT rules for internet access
/ip firewall nat
add action=masquerade chain=srcnat src-address={station_network}.0/24 \\
    out-interface=ether1 comment="Hotspot Internet NAT"

# Basic firewall rules
/ip firewall filter
add action=accept chain=input connection-state=established,related comment="Allow established/related"
add action=accept chain=input src-address={station_network}.0/24 comment="Allow hotspot network"
add action=accept chain=input dst-port=1812-1813 protocol=udp comment="Allow RADIUS"
add action=accept chain=input dst-port=80,443,8291,{station.api_port} protocol=tcp comment="Allow management"
add action=drop chain=input comment="Drop all other input"

#================================================
# DNS CONFIGURATION
#================================================

/ip dns
set servers=8.8.8.8,1.1.1.1 allow-remote-requests=yes

#================================================
# ADDITIONAL CONFIGURATION
#================================================

# Set correct time via NTP
/system ntp client
set enabled=yes primary-ntp=pool.ntp.org

# Configure logging
/system logging
add topics=radius,info,error,warning action=memory

# Configure backup schedule (optional)
/system scheduler
add interval=24h name=daily-backup on-event="/system backup save name=daily-backup" start-time=02:00:00

#================================================
# STATION-SPECIFIC SETTINGS
#================================================

# Station Information
:put "Station: {station.name}"
:put "Business: {station.business_name or 'WiFi Hotspot'}"
:put "Network: {station_network}.0/24"
:put "Gateway: {station_network}.1"
:put "RADIUS Secret: {station_radius_secret}"

# Log configuration completion
:log info "WiFi Billing System configuration loaded for station: {station.name}"
:log info "Station ID: {station.id}"
:log info "Network configured: {station_network}.0/24"

#================================================
# POST-CONFIGURATION NOTES
#================================================

:put ""
:put "=========================================="
:put "CONFIGURATION LOADED SUCCESSFULLY!"
:put "=========================================="
:put ""
:put "IMPORTANT: Complete these manual steps:"
:put "1. Configure WAN interface (ether1) with internet connection"
:put "2. Update Django server IP in walled garden and RADIUS settings"
:put "3. Upload custom login.html to Files > hotspot directory"
:put "4. Update RADIUS secret in your billing system database"
:put "5. Test hotspot functionality"
:put ""
:put "RADIUS Secret for this station: {station_radius_secret}"
:put "Add this secret to your billing system configuration"
:put ""
:put "For support: Check WiFi Billing System documentation"
:put "=========================================="
"""
    
    return config


def generate_station_login_page(station, django_server_url=None):
    """
    Generate station-specific custom login page for MikroTik hotspot
    
    Args:
        station: RouterConfig instance
        django_server_url: Full Django server URL (auto-detected if None)
    
    Returns:
        str: Custom HTML login page
    """
    
    # Auto-detect server URL if not provided
    if not django_server_url:
        django_server_url = get_server_url()
    
    business_name = station.business_name or f"WiFi Hotspot - {station.name}"
    
    login_page = f"""<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{business_name} - WiFi Internet Access</title>
    <link rel="icon" href="data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>📶</text></svg>">
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            padding: 20px;
        }}
        
        .container {{
            background: white;
            padding: 40px;
            border-radius: 20px;
            box-shadow: 0 20px 40px rgba(0,0,0,0.1);
            text-align: center;
            max-width: 450px;
            width: 100%;
            animation: slideUp 0.5s ease-out;
        }}
        
        @keyframes slideUp {{
            from {{
                opacity: 0;
                transform: translateY(30px);
            }}
            to {{
                opacity: 1;
                transform: translateY(0);
            }}
        }}
        
        .logo {{
            width: 80px;
            height: 80px;
            margin: 0 auto 20px;
            background: linear-gradient(45deg, #667eea, #764ba2);
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 2.5rem;
        }}
        
        .business-name {{
            color: #333;
            font-size: 1.8rem;
            font-weight: bold;
            margin-bottom: 8px;
        }}
        
        .station-name {{
            color: #666;
            font-size: 1rem;
            margin-bottom: 20px;
            font-weight: 500;
        }}
        
        .welcome-text {{
            color: #666;
            margin-bottom: 30px;
            line-height: 1.6;
        }}
        
        .access-btn {{
            background: linear-gradient(45deg, #667eea, #764ba2);
            color: white;
            padding: 18px 35px;
            border: none;
            border-radius: 50px;
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            text-decoration: none;
            display: inline-block;
            margin-bottom: 25px;
            transition: all 0.3s;
            text-transform: uppercase;
            letter-spacing: 1px;
            position: relative;
            overflow: hidden;
        }}
        
        .access-btn:before {{
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
            transition: left 0.5s;
        }}
        
        .access-btn:hover:before {{
            left: 100%;
        }}
        
        .access-btn:hover {{
            transform: translateY(-3px);
            box-shadow: 0 15px 30px rgba(102, 126, 234, 0.4);
        }}
        
        .loading {{
            display: none;
            margin-top: 20px;
        }}
        
        .spinner {{
            border: 3px solid #f3f3f3;
            border-top: 3px solid #667eea;
            border-radius: 50%;
            width: 35px;
            height: 35px;
            animation: spin 1s linear infinite;
            margin: 0 auto 15px;
        }}
        
        @keyframes spin {{
            0% {{ transform: rotate(0deg); }}
            100% {{ transform: rotate(360deg); }}
        }}
        
        .device-info {{
            background: #f8f9fa;
            border-radius: 15px;
            padding: 20px;
            margin-top: 25px;
            border-left: 4px solid #667eea;
        }}
        
        .device-info h6 {{
            color: #495057;
            margin-bottom: 10px;
            font-weight: 600;
        }}
        
        .device-details {{
            font-size: 14px;
            color: #6c757d;
            line-height: 1.5;
        }}
        
        .features {{
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 15px;
            margin: 25px 0;
        }}
        
        .feature {{
            text-align: center;
            padding: 15px 10px;
            background: #f8f9fa;
            border-radius: 15px;
            transition: transform 0.3s;
        }}
        
        .feature:hover {{
            transform: translateY(-5px);
        }}
        
        .feature-icon {{
            font-size: 1.5rem;
            margin-bottom: 8px;
        }}
        
        .feature-text {{
            font-size: 12px;
            color: #666;
            font-weight: 500;
        }}
        
        .support-info {{
            margin-top: 20px;
            padding-top: 20px;
            border-top: 1px solid #eee;
            font-size: 13px;
            color: #999;
        }}
        
        @media (max-width: 480px) {{
            .container {{
                padding: 30px 20px;
                margin: 10px;
            }}
            
            .business-name {{
                font-size: 1.5rem;
            }}
            
            .access-btn {{
                padding: 15px 30px;
                font-size: 16px;
            }}
            
            .features {{
                grid-template-columns: 1fr;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="logo">
            📶
        </div>
        
        <h1 class="business-name">{business_name}</h1>
        <div class="station-name">Station: {station.name}</div>
        
        <p class="welcome-text">
            Welcome! Get instant internet access with our affordable plans. 
            Choose from time-based or data-based packages to suit your needs.
        </p>
        
        <div class="features">
            <div class="feature">
                <div class="feature-icon">🚀</div>
                <div class="feature-text">Fast</div>
            </div>
            <div class="feature">
                <div class="feature-icon">🔒</div>
                <div class="feature-text">Secure</div>
            </div>
            <div class="feature">
                <div class="feature-icon">💳</div>
                <div class="feature-text">Easy Pay</div>
            </div>
        </div>
        
        <a href="#" id="accessBtn" class="access-btn" onclick="redirectToBilling()">
            Get Internet Access
        </a>
        
        <div id="loading" class="loading">
            <div class="spinner"></div>
            <p>Redirecting to payment portal...</p>
        </div>
        
        <div class="device-info">
            <h6>Device Information</h6>
            <div class="device-details">
                <div><strong>MAC:</strong> $(mac)</div>
                <div><strong>IP:</strong> $(ip)</div>
                <div><strong>Station:</strong> {station.name}</div>
            </div>
        </div>
        
        <div class="support-info">
            Powered by WiFi Billing System<br>
            Station ID: {station.id} | Business: {business_name}
        </div>
    </div>

    <script>
        // Get MikroTik template variables
        var deviceMac = "$(mac)";
        var deviceIp = "$(ip)";
        var username = "$(username)";
        var linkLogin = "$(link-login)";
        var linkOrig = "$(link-orig)";
        
        function redirectToBilling() {{
            // Show loading state
            document.getElementById('loading').style.display = 'block';
            document.getElementById('accessBtn').style.display = 'none';
            
            // Build redirect URL with all necessary parameters
            var billingServerUrl = "{django_server_url}";
            var redirectUrl = billingServerUrl + "/plans/" + 
                             "?mac=" + encodeURIComponent(deviceMac) + 
                             "&ip=" + encodeURIComponent(deviceIp) + 
                             "&station_id={station.id}" +
                             "&station_name=" + encodeURIComponent("{station.name}") +
                             "&business_name=" + encodeURIComponent("{business_name}") +
                             "&username=" + encodeURIComponent(username) +
                             "&link_login=" + encodeURIComponent(linkLogin) +
                             "&link_orig=" + encodeURIComponent(linkOrig) +
                             "&redirect_back=" + encodeURIComponent(window.location.href);
            
            // Add some delay for better UX, then redirect
            setTimeout(function() {{
                window.location.href = redirectUrl;
            }}, 1500);
        }}
        
        // Auto-redirect option (uncomment if you want automatic redirection after 3 seconds)
        // setTimeout(function() {{
        //     redirectToBilling();
        // }}, 3000);
        
        // Add some interactive feedback
        document.addEventListener('DOMContentLoaded', function() {{
            // Add click animations
            const btn = document.getElementById('accessBtn');
            btn.addEventListener('mousedown', function() {{
                this.style.transform = 'translateY(-1px) scale(0.98)';
            }});
            
            btn.addEventListener('mouseup', function() {{
                this.style.transform = 'translateY(-3px) scale(1)';
            }});
        }});
    </script>
</body>
</html>"""
    
    return login_page


def generate_station_readme(station):
    """
    Generate installation instructions for the station
    
    Args:
        station: RouterConfig instance
    
    Returns:
        str: README instructions for station setup
    """
    
    readme = f"""# WiFi Billing System - Station Setup Instructions

## Station Information
- **Station Name**: {station.name}
- **Station ID**: {station.id}
- **Business**: {station.business_name or 'WiFi Hotspot'}
- **Generated**: {timezone.now().strftime('%Y-%m-%d %H:%M:%S')}

## Files Included
1. `{station.name}_config.rsc` - MikroTik RouterOS configuration script
2. `{station.name}_login.html` - Custom hotspot login page
3. `{station.name}_README.txt` - This instruction file

## Installation Steps

### 1. MikroTik Router Configuration
1. Connect to your MikroTik router via Winbox or SSH
2. Go to **Files** menu and upload the `{station.name}_config.rsc` file
3. Open **Terminal** and run: `/import {station.name}_config.rsc`
4. Wait for configuration to complete
5. Reboot the router: `/system reboot`

### 2. Custom Login Page Setup
1. In Winbox, go to **Files** menu
2. Create a folder named `hotspot` if it doesn't exist
3. Upload `{station.name}_login.html` to the `hotspot` folder
4. Rename it to `login.html` in the hotspot folder
5. The custom login page is now active

### 3. Network Configuration
- **Network**: 192.168.{100 + (station.id % 50)}.0/24
- **Gateway**: 192.168.{100 + (station.id % 50)}.1
- **DHCP Range**: 192.168.{100 + (station.id % 50)}.10-200
- **WiFi Interface**: {station.hotspot_interface}

### 4. Internet Connection
1. Connect your internet cable to **ether1** port
2. Configure ether1 with your ISP settings:
   - Static IP: `/ip address add address=YOUR_ISP_IP interface=ether1`
   - DHCP Client: `/ip dhcp-client add interface=ether1 disabled=no`
3. Add default route if using static IP:
   `/ip route add dst-address=0.0.0.0/0 gateway=YOUR_ISP_GATEWAY`

### 5. Billing System Integration

#### Important: Update These Settings
1. **Django Server IP**: Replace `YOUR_DJANGO_SERVER_IP` in the configuration with your actual server IP
2. **RADIUS Secret**: Add this station's RADIUS secret to your billing system database
3. **Walled Garden**: Ensure your Django server IP is in the walled garden list

#### RADIUS Configuration
- **Server**: Your Django Server IP
- **Secret**: Generated unique secret (see configuration file)
- **Service**: Hotspot + Login
- **Timeout**: 5 seconds

### 6. Payment Configuration
{f'''
**Payment Method**: {station.kcb_account_type.title() if hasattr(station, 'kcb_account_type') else 'Not configured'}
**Account Number**: {getattr(station, 'kcb_account_number', 'Not configured')}
**Account Name**: {getattr(station, 'account_name', 'Not configured')}
''' if station.enable_payments else 'Payments disabled for this station'}

### 7. Testing the Setup
1. Connect a device to the WiFi network
2. Open a web browser - should redirect to custom login page
3. Click "Get Internet Access" - should redirect to billing system
4. Test payment flow with a small amount
5. Verify internet access is granted after successful payment

### 8. Monitoring and Maintenance
- **Router Access**: http://192.168.{100 + (station.id % 50)}.1 (admin panel)
- **API Access**: Port {station.api_port} for billing system
- **Logs**: Check `/log print` for system messages
- **Active Users**: `/ip hotspot active print`

## Troubleshooting

### Common Issues
1. **Users not redirected**: Check walled garden configuration
2. **Payment fails**: Verify KCB credentials and network connectivity  
3. **No internet after payment**: Check RADIUS authentication and user profiles
4. **Login page not showing**: Verify login.html is in hotspot folder

### Important Notes
- Keep RADIUS secret secure and unique for each station
- Regular backup: `/system backup save name=backup`
- Monitor logs regularly for issues
- Update firmware periodically for security

### Support
- Check WiFi Billing System documentation
- Contact system administrator for billing system issues
- Refer to MikroTik documentation for router-specific problems

## Security Recommendations
1. Change default admin password
2. Disable unnecessary services
3. Enable firewall rules (already configured)
4. Use strong API passwords
5. Regular security updates

---
Generated by WiFi Billing System
Station: {station.name} | ID: {station.id}
Configuration Date: {timezone.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
    
    return readme